// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "github.com/supergiant/robot/pkg/models"
)

// GetRecommendationPluginsHandlerFunc turns a function with the right signature into a get recommendation plugins handler
type GetRecommendationPluginsHandlerFunc func(GetRecommendationPluginsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRecommendationPluginsHandlerFunc) Handle(params GetRecommendationPluginsParams) middleware.Responder {
	return fn(params)
}

// GetRecommendationPluginsHandler interface for that can handle valid get recommendation plugins params
type GetRecommendationPluginsHandler interface {
	Handle(GetRecommendationPluginsParams) middleware.Responder
}

// NewGetRecommendationPlugins creates a new http.Handler for the get recommendation plugins operation
func NewGetRecommendationPlugins(ctx *middleware.Context, handler GetRecommendationPluginsHandler) *GetRecommendationPlugins {
	return &GetRecommendationPlugins{Context: ctx, Handler: handler}
}

/*GetRecommendationPlugins swagger:route GET /plugin getRecommendationPlugins

Returns list of the installed recommendation plugins

*/
type GetRecommendationPlugins struct {
	Context *middleware.Context
	Handler GetRecommendationPluginsHandler
}

func (o *GetRecommendationPlugins) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetRecommendationPluginsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetRecommendationPluginsOKBody get recommendation plugins o k body
// swagger:model GetRecommendationPluginsOKBody
type GetRecommendationPluginsOKBody struct {

	// installed plugins
	InstalledRecommendationPlugins []*models.RecommendationPlugin `json:"InstalledRecommendationPlugins"`
}

// Validate validates this get recommendation plugins o k body
func (o *GetRecommendationPluginsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInstalledRecommendationPlugins(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetRecommendationPluginsOKBody) validateInstalledRecommendationPlugins(formats strfmt.Registry) error {

	if swag.IsZero(o.InstalledRecommendationPlugins) { // not required
		return nil
	}

	for i := 0; i < len(o.InstalledRecommendationPlugins); i++ {
		if swag.IsZero(o.InstalledRecommendationPlugins[i]) { // not required
			continue
		}

		if o.InstalledRecommendationPlugins[i] != nil {
			if err := o.InstalledRecommendationPlugins[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getRecommendationPluginsOK" + "." + "InstalledRecommendationPlugins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetRecommendationPluginsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRecommendationPluginsOKBody) UnmarshalBinary(b []byte) error {
	var res GetRecommendationPluginsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
